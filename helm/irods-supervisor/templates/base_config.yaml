# SPDX-FileCopyrightText: 2022 Renaissance Computing Institute. All rights reserved.
# SPDX-FileCopyrightText: 2023 Renaissance Computing Institute. All rights reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: LicenseRef-RENCI
# SPDX-License-Identifier: MIT

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "supervisor-scripts"
data:
  base_config.json: |-
    {
      "CLUSTER": {{ .Values.base_config.cluster | quote }},
      "NAMESPACE": {{ .Values.base_config.namespace | quote }},
      "DATA_PVC_CLAIM": {{ .Values.base_config.data_pvc_claim | quote }},
      "SECRETS_CLAIM": {{ .Values.base_config.secrets_claim | quote }},
      "CREATE_SLEEP": {{ .Values.base_config.create_sleep }},
      "JOB_TIMEOUT": {{ .Values.base_config.job_timeout }},
      "JOB_LIMIT_MULTIPLIER": {{ .Values.base_config.job_limit_multiplier | quote  }},
      "JOB_BACKOFF_LIMIT": {{ .Values.base_config.job_backoff_limit }},
      "SV_INACTIVITY": {{ .Values.base_config.sv_inactivity }},
      "POLL_SHORT_SLEEP": {{ .Values.base_config.poll_short_sleep }},
      "POLL_LONG_SLEEP": {{ .Values.base_config.poll_long_sleep }},
      "MAX_NO_ACTIVITY_COUNT": {{ .Values.base_config.max_no_activity_count }},
      "CPU_LIMITS": {{ .Values.cpu_limits }}
    }

  init-irods-pg-db.sh: |-
    #!/bin/sh
    set -e

    # helpful cli to determine startup was successful
    # postgres-# \l
    # postgres-# \du
    # Check to see if the apsviz_gauge DB and user exist. if not create them
    psql -v ON_ERROR_STOP=1 --username "{{ .Values.initDB.pg_user }}" <<-EOSQL
      CREATE DATABASE "ICAT";
      CREATE ROLE "{{ .Values.initDB.user }}" WITH LOGIN SUPERUSER CREATEDB CREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD '{{ .Values.initDB.password }}';
      GRANT ALL PRIVILEGES ON DATABASE "ICAT" TO irods;
    EOSQL

  init-irods-mysql-db.sh: |-
    #!/bin/sh
    # helpful cli to determine startup was successful
    # mysql> SELECT user FROM mysql.user;
    # mysql> show databases;
    mysql -uroot -p{{ .Values.initDB.password }} -e "CREATE DATABASE ICAT; CREATE USER '{{ .Values.initDB.user }}'@'localhost'; GRANT ALL ON ICAT.* to '{{ .Values.initDB.user }}'@'localhost';"

  00-irods.conf: |-
    $FileCreateMode 0644
    $DirCreateMode 0755
    $Umask 0000
    $template irods_format,"%msg%\n"
    :programname,startswith,"irodsServer" /var/log/irods/irods.log;irods_format
    & stop
    :programname,startswith,"irodsDelayServer" /var/log/irods/irods.log;irods_format
    & stop

  irods: |-
    /var/log/irods/irods.log {
        weekly
        rotate 26
        copytruncate
        delaycompress
        compress
        dateext
        notifempty
        missingok
        su root root
    }

  irodsInstall.sh: |-
    apt-get update;
    apt-get -y upgrade;
    apt-get -y install irods-server irods-database-plugin-postgres;
    apt-get autoclean;
    sed 's/HOSTNAME_TEMPLATE/'"${HOSTNAME}"'/g' /irods/serviceInit.json > /tmp/serviceInit.json.1;
    sed 's/DBNAME_TEMPLATE/'"${DB_SERVICE_NAME}"'/g' /tmp/serviceInit.json.1 > /tmp/serviceInit.json;
    python3 /var/lib/irods/scripts/setup_irods.py --json_configuration_file /tmp/serviceInit.json;
    su - irods -c './irodsctl start -v';
    until false; do sleep 10000; done;

  serviceInit.json: |-
    {
      "admin_password": "rods",
      "default_resource_directory": "/var/lib/irods/vault",
      "default_resource_name": "demoResc",
      "host_system_information": {
        "service_account_user_name": "irods",
        "service_account_group_name": "irods"
      },
      "service_account_environment": {
        "irods_client_server_negotiation": "request_server_negotiation",
        "irods_client_server_policy": "CS_NEG_REFUSE",
        "irods_connection_pool_refresh_time_in_seconds": 300,
        "irods_cwd": "/tempZone/home/rods",
        "irods_default_hash_scheme": "SHA256",
        "irods_default_number_of_transfer_threads": 4,
        "irods_default_resource": "demoResc",
        "irods_encryption_algorithm": "AES-256-CBC",
        "irods_encryption_key_size": 32,
        "irods_encryption_num_hash_rounds": 16,
        "irods_encryption_salt_size": 8,
        "irods_home": "/tempZone/home/rods",
        "irods_host": "HOSTNAME_TEMPLATE",
        "irods_match_hash_policy": "compatible",
        "irods_maximum_size_for_single_buffer_in_megabytes": 32,
        "irods_port": 1247,
        "irods_server_control_plane_encryption_algorithm": "AES-256-CBC",
        "irods_server_control_plane_encryption_num_hash_rounds": 16,
        "irods_server_control_plane_key": "32_byte_server_control_plane_key",
        "irods_server_control_plane_port": 1248,
        "irods_transfer_buffer_size_for_parallel_transfer_in_megabytes": 4,
        "irods_user_name": "rods",
        "irods_zone_name": "tempZone",
        "schema_name": "service_account_environment",
        "schema_version": "v4"
      },
      "server_config": {
        "advanced_settings": {
          "migrate_delay_server_sleep_time_in_seconds": 604800,
          "default_log_rotation_in_days": 5,
          "default_number_of_transfer_threads": 4,
          "default_temporary_password_lifetime_in_seconds": 120,
          "delay_rule_executors": ["HOSTNAME_TEMPLATE"],
          "delay_server_sleep_time_in_seconds": 30,
          "dns_cache": {
            "eviction_age_in_seconds": 3600,
            "shared_memory_size_in_bytes": 5000000
          },
          "hostname_cache": {
            "eviction_age_in_seconds": 3600,
            "shared_memory_size_in_bytes": 2500000
          },
          "maximum_size_for_single_buffer_in_megabytes": 32,
          "maximum_size_of_delay_queue_in_bytes": 0,
          "maximum_temporary_password_lifetime_in_seconds": 7200,
          "number_of_concurrent_delay_rule_executors": 4,
          "stacktrace_file_processor_sleep_time_in_seconds": 10,
          "transfer_buffer_size_for_parallel_transfer_in_megabytes": 4,
          "transfer_chunk_size_for_parallel_transfer_in_megabytes": 40
        },
        "catalog_provider_hosts": ["HOSTNAME_TEMPLATE"],
        "catalog_service_role": "provider",
        "client_api_allowlist_policy": "enforce",
        "controlled_user_connection_list": {
          "control_type": "denylist",
          "users": []
        },
        "default_dir_mode": "0750",
        "default_file_mode": "0600",
        "default_hash_scheme": "SHA256",
        "default_resource_name": "demoResc",
        "environment_variables": {},
        "federation": [],
        "host_access_control": {"access_entries": []},
        "host_resolution": {"host_entries": []},
        "log_level": {
          "agent": "trace",
          "agent_factory": "trace",
          "api": "info",
          "authentication": "info",
          "database": "info",
          "delay_server": "trace",
          "legacy": "trace",
          "microservice": "info",
          "network": "info",
          "resource": "info",
          "rule_engine": "info",
          "server": "trace",
          "sql": "info"
        },
        "match_hash_policy": "compatible",
        "negotiation_key": "32_byte_server_negotiation_key__",
        "plugin_configuration": {
          "authentication": {},
          "database": {
            "postgres": {
              "db_host": "DBNAME_TEMPLATE",
              "db_name": "ICAT",
              "db_odbc_driver": "PostgreSQL ANSI",
              "db_password": "testpassword",
              "db_port": 5432,
              "db_username": "irods"
            }
          },
          "network": {},
          "resource": {},
          "rule_engines": [
            {
              "instance_name": "irods_rule_engine_plugin-irods_rule_language-instance",
              "plugin_name": "irods_rule_engine_plugin-irods_rule_language",
              "plugin_specific_configuration": {
                "re_data_variable_mapping_set": ["core"],
                "re_function_name_mapping_set": ["core"],
                "re_rulebase_set": ["core"],
                "regexes_for_supported_peps": [
                  "ac[^ ]*",
                  "msi[^ ]*",
                  "[^ ]*pep_[^ ]*_(pre|post|except|finally)"
                ]
              },
              "shared_memory_instance": "irods_rule_language_rule_engine"
            },
            {
              "instance_name": "irods_rule_engine_plugin-cpp_default_policy-instance",
              "plugin_name": "irods_rule_engine_plugin-cpp_default_policy",
              "plugin_specific_configuration": {}
            }
          ]
        },
        "rule_engine_namespaces": [""],
        "schema_name": "server_config",
        "schema_validation_base_uri": "file:///var/lib/irods/configuration_schemas",
        "schema_version": "v4",
        "server_control_plane_encryption_algorithm": "AES-256-CBC",
        "server_control_plane_encryption_num_hash_rounds": 16,
        "server_control_plane_key": "32_byte_server_control_plane_key",
        "server_control_plane_port": 1248,
        "server_control_plane_timeout_milliseconds": 10000,
        "server_port_range_end": 20005,
        "server_port_range_start": 20000,
        "xmsg_port": 1279,
        "zone_auth_scheme": "native",
        "zone_key": "TEMPORARY_ZONE_KEY",
        "zone_name": "tempZone",
        "zone_port": 1247,
        "zone_user": "rods"
      }
    }